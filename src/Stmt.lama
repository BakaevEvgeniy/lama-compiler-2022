-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[s, w], stmt) {
  case stmt of
    Assn (x, expr) -> [s <- [x, evalExpr(s, expr)], w]
    | Seq(stmt1, stmt2) -> eval(eval([s, w], stmt1), stmt2)
    | Skip -> [s, w]
    | Read(x) ->
      case readWorld(w) of
        [n, newW] -> [s <- [x, n], newW]
      esac
    | Write(expr) -> [s, writeWorld(evalExpr(s, expr), w)]
    | If (cond, stmt1, stmt2) -> if evalExpr (s, cond) then eval (c, stmt1) else eval (c, stmt2) fi
    | While (cond, body) -> if evalExpr (s, cond) then eval (eval (c, body), stmt) else c fi
    | DoWhile (body, cond) -> eval (eval (c, body), While (cond, body))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
