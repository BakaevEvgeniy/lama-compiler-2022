-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, s, w], insns) {
  case insns of
    { } -> c
    | insn : insns ->
      case insn of
        READ ->
            case readWorld(w) of
              [n, newW] -> eval(env, [n:stack, s, newW], insns)
            esac
        | WRITE ->
          case stack of
            n : tl -> eval(env, [tl, s, writeWorld (n, w)], insns)
          esac
        | BINOP (op) ->
          case stack of
            e1 : e2 : tl -> eval(env, [evalOp (op, e2, e1):tl, s, w], insns)
          esac
        | LD (x) -> eval(env, [s(x) : stack, s, w], insns)
        | LDA (x) -> eval(env, [Ref (x) : stack, s, w], insns)
        | ST (x) ->
          case stack of
            v : _ -> eval(env, [stack, s <- [x, v], w], insns)
          esac
        | STI ->
          case stack of
            z : Ref(x) : stack -> eval(env, [z : stack, s <- [x, z], w], insns)
          esac
        | CONST (n) -> eval(env, [n : stack, s, w], insns)
        | LABEL (l) -> eval(env, c, insns)
        | DROP ->
          case stack of
            _ : stackRest -> eval (env, [stackRest, s, w], insns)
          esac
        | CJMP (cond, l) ->
          case stack of
            v : stackRest -> eval (env, [stackRest, s, w], if (case cond of "nz" -> v | "z" -> v == false esac) then fromLabel(env, l) else insns fi)
          esac
        | JMP (l) -> eval (env, c, fromLabel(env, l))
      esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x) -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e) ->
        case env.genLabel of
          [writeLab, env] ->
            case compile (writeLab, env, e) of
              [writeLabUsed, env, eCode] -> [false, env, eCode <+> label (writeLab, writeLabUsed) <+ WRITE]
            esac
        esac
    | Assn (x, e) ->
        case env.genLabels(2) of
          [lab1, lab2, env] ->
            case compile (lab1, env, x) of
              [lab1Used, env, xCode] ->
                case compile (lab2, env, e) of
                  [lab2Used, env, eCode] -> [false, env, xCode <+> label (lab1, lab1Used) <+> eCode <+> label (lab2, lab2Used) <+ STI]
                esac
            esac
        esac
    | Binop (op, l, r) -> 
        case env.genLabels(2) of
            [lab1, lab2, env] -> case compile (lab1, env, l) of
                [lab1Used, env, code1] -> case compile (lab2, env, r) of
                    [lab2Used, env, code2] -> [false, env, code1 <+> label (lab1, lab1Used) <+> code2 <+> label (lab2, lab2Used) <+ BINOP (op)]
                esac
            esac
        esac
    | Seq (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (cond, s1, s2) ->
        case env.genLabels(2) of
          [s2Lab, condLab, env] ->
             case compile (lab, env, s1) of
                [_, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [_, env, s2Code] -> case compile(condLab, env, cond) of
                        [condLabUsed, env, condCode] ->
                          [
                            true,
                            env,
                            condCode <+> label (condLab, condLabUsed) <+> singletonBuffer(CJMP("z", s2Lab)) <+> s1Code <+> singletonBuffer(JMP(lab)) <+> singletonBuffer(LABEL(s2Lab)) <+> s2Code
                          ]
                    esac
                  esac
             esac
        esac
    | While (cond, body) ->
        case env.genLabels(2) of
          [sLabel, condLabel, env] ->
            case compile (sLabel, env, body) of
              [_, env, bodyCode] -> case compile (condLabel, env, cond) of
                  [condLabelUsed, env, condCode] ->
                    [
                      true,
                      env,
                      singletonBuffer(LABEL(sLabel)) <+> condCode <+> label (condLabel, condLabelUsed) <+> singletonBuffer(CJMP("z", lab)) <+> bodyCode <+> singletonBuffer(JMP(sLabel))
                    ]
              esac
            esac
        esac
    | DoWhile (body, cond) -> compile (lab, env, Seq (body, While (cond, body)))
    | Ignore (e)     ->
        case env.genLabel of
            [lab, env] -> case compile (lab, env, e) of
                [labUsed, env, code] -> [false, env, code <+> label (lab, labUsed) <+ DROP]
            esac
        esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}