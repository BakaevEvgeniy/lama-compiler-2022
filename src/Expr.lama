-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
   case expr of
     Assn (l, r) ->
        case evalList (c, { l, r }) of
          [[s, w], { Ref (x), v }] -> [[s <- [x, v], w], v]
        esac
    | Seq (s1, s2) ->
      case evalList (c, { s1, s2 }) of
        [c, { _, v }] -> [c, v]
      esac
    | Skip -> [c, Void]
    | Const (n)-> [c, n]
    | Var (x) -> [c, s(x)]
    | Ref (x) -> [c, Ref(x)]
    | Read (x) -> 
      case readWorld(w) of [v, nw] ->
        [[s <- [x, v], nw], Void]
      esac
    | Write (e) ->  
      case eval(c, e) of [[s, nw], v] ->
        [[s, writeWorld (v, nw)], Void]
      esac
    | If (cond, expr1, expr2) -> 
      case eval(c, cond) of [nc, v] ->
        if v then
          eval(nc, expr1)
        else
          eval(nc, expr2)
        fi
      esac
    | While (e, body) ->
      case eval (c, e) of
        [c, cond] ->  
        if cond then
          case eval (c, body) of [c, Void] -> 
            eval (c, expr)
          esac
        else [c, Void]
        fi
      esac
    | DoWhile (body, e) ->
      case eval (c, body) of
        [c, Void] -> eval (c, While (e, body))
      esac
    | Binop  (op, expr1, expr2)  -> case evalList (c, { expr1, expr2 }) of
                                      [c, { expr1, expr2 }] -> [c, evalOp (op, expr1, expr2)]
                                    esac
    | Ignore (e) -> [eval(c, e)[0], Void]
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
